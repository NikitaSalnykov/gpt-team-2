{"mappings":"YAAA,IA0BAA,EAAe,CACbC,KA3BW,SAACC,EAAKC,GACjB,IACE,IAAMC,EAAkBC,KAAKC,UAAUH,GACvCI,aAAaC,QAAQN,EAAKE,E,CAC1B,MAAOK,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,Q,GAuB3CC,KAnBW,SAAAV,GACX,IACE,IAAME,EAAkBG,aAAaM,QAAQX,GAC7C,OAA2B,OAApBE,OAA2BU,EAAYT,KAAKU,MAAMX,E,CACzD,MAAOK,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,Q,GAe3CK,OAXa,SAAAd,GACb,IACEK,aAAaU,WAAWf,E,CACxB,MAAOO,GACPC,QAAQQ,IAAI,sBAAuBT,EAAME,Q,ICtBtC,SAASQ,EAAaC,GACzB,OAAOA,EAAIC,KAAI,SAACC,GACZ,MAAO,wCAEuCC,OAA7BD,EAAKE,KAAO,QAAU,GAAG,MAETD,OAFaD,EAAKG,KAAK,iEAGnDF,OAD4BD,EAAKI,GACjC,sE,IAKJC,KAAK,G,CCXP,IAAMC,EAAaC,SAASC,cAAc,mBACpCC,EAASF,SAASC,cAAc,MCCtC,SAASE,EAAWZ,GACvBW,EAAOE,UAAYd,EAAaC,E,CCoBpC,IAAMc,EAAY,cAElBN,EAAWO,iBAAiB,UAK5B,SAAuBC,GACrBA,EAAMC,iBAEN,IAAMC,EAAQF,EAAMG,cAAcC,SAAS,cACrCC,EAAQH,EAAMnC,MAAMuC,OAE1B,IAAKD,EACH,OAAOE,MAAM,kBAGf,GAAc,KAAVF,EAAc,CAEhB,GADkBG,EAAMC,MAAK,SAAAC,G,OAAMA,EAAGrB,OAASgB,C,IAE7C,OAAOE,MAAM,a,CAIjB,IAAMrB,EAAO,CACXI,GAAIqB,KAAKC,MACTvB,KAAMgB,GAGRG,EAAMK,KAAK3B,GAETgB,EAAMnC,MAAQ,GAEdH,EAAgBC,KAAKiC,EAAWU,GAElCZ,EAAWY,E,IAhCbb,EAAOI,iBAAiB,SAoCxB,SAA0BC,GAExB,GAA8B,WAA1BA,EAAMc,OAAOC,SACjB,OAGA,IAAMC,EAAUC,OAAOjB,EAAMc,OAAOI,QAAQ5B,IAE1CkB,EAAQA,EAAMW,QAAO,SAAAT,G,OAAMA,EAAGpB,KAAO0B,C,IACrCpD,EAAgBC,KAAKiC,EAAWU,GAClCZ,EAAWY,E,IA5Cb,IAAIA,EAAQ5C,EAAgBY,KAAKsB,IAAc,GAgD/CF,EAAWY,E","sources":["src/js/localstorageapi.js","src/js/markup.js","src/js/refs.js","src/js/updatelist.js","src/js/todoes.js"],"sourcesContent":["const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst remove = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.log('Remove item error: ', error.message);\n  }\n};\n\nexport default {\n  save,\n  load,\n  remove,\n};","export function createMarkup(arr) {\n    return arr.map((item) => {\n        return `\n      <li>\n      <span class=\"text${item.done ? ' done' : ''}\">${item.text}</span>\n      <div>\n        <button type=\"button\" data-id=\"${item.id\n            }\" class=\"delete\">Видалити</button>\n      </div>\n      </li>\n    `;\n    })\n        .join('');\n}","\nexport const formToDoEl = document.querySelector('.js-todos__form')\nexport const listEl = document.querySelector('ul')\n","import { createMarkup } from \"./markup\";\nimport { listEl } from \"./refs\";\n\nexport function updateList(arr) {\n    listEl.innerHTML = createMarkup(arr);  \n}","//TODO:====================02====================================TODOS============================================================================================\n/**\n  |============================\n  | Список справ todos:\n  | 1 - Напиши скрипт для застосунку todos. Реалізуй методи додавання та видалення щоденних справ.\n  | 2 - Реалізуй перевірку на неможлівість додати пусту справу до списку справ. \n  | Виконуй завдвння послідовно: \n  | - Спочатку знайди елементи у Дом дереві, з якими тобі потрібно працювати.\n  | - Додай слухачі подій з відповідними подіями\n  | - Пропиши три функції, які тобі допоможуть це реалізувати \n  | - Функція обробник на додавання елементів \"onClickSubmit\". Її завдання, зчитати значення з інпуту, виконай за допомогою \"currentTarget.elements\", також не забувай\n  | про метод trim(), який видаляє пробіли. Ця функція повинна робити перевірку на пустий інпут, створювати обьект, додавати до масиву нову todos і чистити інпут. Також\n  | запускати функцію рендера сторінкі.\n  | - Функція \"onBtnClick\", яка буде видаляти todos. Вона повинна знайти id todos, яку потрібно видалити. Значення id можно считати з дата атрибуту за допомогою \n  | \"target.dataset.id\", але не забувай, що там буде рядок і можно використати метод \"parseInt\". Для видалення можно використати метод \"filter\". Після видалення ми \n  | повинні відрендорити сторінку за допомогою функції \"updateList\".\n  | - І сама функція \"updateList\". Ії завдання створити розмітку за допомого метода createElement і setAttribute, додати на сторінку за допомогою метода \"append\". Не \n  | забувай чистити розмітку перед її вставкою.\n  |============================\n*/\nimport localstorageAPI from \"./localstorageapi\";\nimport { updateList } from \"./updatelist\";\nimport {formToDoEl, listEl} from \"./refs\"\n\nconst LOCAL_KEY = 'todos-items'\n\nformToDoEl.addEventListener('submit', onClickSubmit)\nlistEl.addEventListener('click', onBtnDeleteClick)\n\nlet items = localstorageAPI.load(LOCAL_KEY) || [] \n\nfunction onClickSubmit(event) {\n  event.preventDefault();\n\n  const input = event.currentTarget.elements['user-todos']\n  const todos = input.value.trim()\n  \n  if (!todos) {\n    return alert('заповніть поле')\n  }\n\n  if (todos !== '') {\n    const dublicate = items.find(el => el.text === todos)\n    if (dublicate) {\n      return alert('Dublicate!')\n    }\n  }\n\n  const item = {\n    id: Date.now(),\n    text: todos,\n  }\n\n  items.push(item)\n\n    input.value = ''\n    \n    localstorageAPI.save(LOCAL_KEY, items)\n\n  updateList(items)\n\n}\n\nfunction onBtnDeleteClick(event) {\n  \n  if (event.target.nodeName !== 'BUTTON') {\n  return\n  }\n\n  const todosId = Number(event.target.dataset.id)\n  \n    items = items.filter(el => el.id !== todosId)\n    localstorageAPI.save(LOCAL_KEY, items)\n  updateList(items)\n\n}\n\nupdateList(items)"],"names":["$02d2d96b8459f158$export$2e2bcd8739ae039","save","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","load","getItem","undefined","parse","remove","removeItem","log","$1457a8b41868a85b$export$24783e9f3a24abe4","arr","map","item","concat","done","text","id","join","$37e33676934ad046$export$82130d5be648e4ea","document","querySelector","$37e33676934ad046$export$d1b971427e05d4ff","$81670fef6f91fc8a$export$ce978267640f61ce","innerHTML","$b2a9b6d6cafda1c6$var$LOCAL_KEY","addEventListener","event","preventDefault","input","currentTarget","elements","todos","trim","alert","$b2a9b6d6cafda1c6$var$items","find","el","Date","now","push","target","nodeName","todosId","Number","dataset","filter"],"version":3,"file":"index.d5b799f5.js.map"}